keypoint

*template KeyPoint = temKp [0, 229]			*template Descriptor = temDes
*image KeyPoint = [0, 1088]				*image Descriptor = imgDes

pt ? coordinates of the keypoint
size ? diameter of the meaningful keypoint neighborhood
angle ? computed orientation of the keypoint. range [0,360) degrees.
response ? the response by which the most strong keypoints have been selected. Can be used for further sorting or subsampling
octave ? octave (pyramid layer) from which the keypoint has been extracted

DMatch

*matches[0, 229][0|1]

DMatch.distance - Distance between descriptors. The lower, the better it is.
DMatch.trainIdx - Index of the descriptor in train descriptors.
DMatch.queryIdx - Index of the descriptor in query descriptors.
DMatch.imgIdx - Index of the train image.

template => n개의 keypoint가 있고
image => m개의 keypoint가 있음

matches => n개의 keypoint마다 가장 가까운 2개의 DMatch (m개의 keypoint에서 찾음)

matches.distance => 디스크립터 거리
matches.trainIdx => m개의 keypoint중에서 몇번째인지. 
		ex) matches[10][0].trainIdx => 11번째의 template keypoint와 가장 가까운 image keypoint 인덱스
		ex) matches[220][1].trainIdx => 220번째의 template keypoint와 두번째로 가까운 image keypoint 인덱스
